{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stream = void 0;\nconst index_1 = require(\"./_shims/index.js\");\nconst error_1 = require(\"./error.js\");\nconst error_2 = require(\"openai/error\");\nclass Stream {\n  constructor(iterator, controller) {\n    this.iterator = iterator;\n    this.controller = controller;\n  }\n  static fromSSEResponse(response, controller) {\n    let consumed = false;\n    const decoder = new SSEDecoder();\n    async function* iterMessages() {\n      if (!response.body) {\n        controller.abort();\n        throw new error_1.OpenAIError(`Attempted to iterate over a response with no body`);\n      }\n      const lineDecoder = new LineDecoder();\n      const iter = readableStreamAsyncIterable(response.body);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          const sse = decoder.decode(line);\n          if (sse) yield sse;\n        }\n      }\n      for (const line of lineDecoder.flush()) {\n        const sse = decoder.decode(line);\n        if (sse) yield sse;\n      }\n    }\n    async function* iterator() {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const sse of iterMessages()) {\n          if (done) continue;\n          if (sse.data.startsWith('[DONE]')) {\n            done = true;\n            continue;\n          }\n          if (sse.event === null) {\n            let data;\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n            if (data && data.error) {\n              throw new error_2.APIError(undefined, data.error, undefined, undefined);\n            }\n            yield data;\n          }\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n    return new Stream(iterator, controller);\n  }\n  /**\n   * Generates a Stream from a newline-separated ReadableStream\n   * where each item is a JSON value.\n   */\n  static fromReadableStream(readableStream, controller) {\n    let consumed = false;\n    async function* iterLines() {\n      const lineDecoder = new LineDecoder();\n      const iter = readableStreamAsyncIterable(readableStream);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          yield line;\n        }\n      }\n      for (const line of lineDecoder.flush()) {\n        yield line;\n      }\n    }\n    async function* iterator() {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const line of iterLines()) {\n          if (done) continue;\n          if (line) yield JSON.parse(line);\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n    return new Stream(iterator, controller);\n  }\n  [Symbol.asyncIterator]() {\n    return this.iterator();\n  }\n  /**\n   * Splits the stream into two streams which can be\n   * independently read from at different speeds.\n   */\n  tee() {\n    const left = [];\n    const right = [];\n    const iterator = this.iterator();\n    const teeIterator = queue => {\n      return {\n        next: () => {\n          if (queue.length === 0) {\n            const result = iterator.next();\n            left.push(result);\n            right.push(result);\n          }\n          return queue.shift();\n        }\n      };\n    };\n    return [new Stream(() => teeIterator(left), this.controller), new Stream(() => teeIterator(right), this.controller)];\n  }\n  /**\n   * Converts this stream to a newline-separated ReadableStream of\n   * JSON stringified values in the stream\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n   */\n  toReadableStream() {\n    const self = this;\n    let iter;\n    const encoder = new TextEncoder();\n    return new index_1.ReadableStream({\n      async start() {\n        iter = self[Symbol.asyncIterator]();\n      },\n      async pull(ctrl) {\n        try {\n          const {\n            value,\n            done\n          } = await iter.next();\n          if (done) return ctrl.close();\n          const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n          ctrl.enqueue(bytes);\n        } catch (err) {\n          ctrl.error(err);\n        }\n      },\n      async cancel() {\n        await iter.return?.();\n      }\n    });\n  }\n}\nexports.Stream = Stream;\nclass SSEDecoder {\n  constructor() {\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n  decode(line) {\n    if (line.endsWith('\\r')) {\n      line = line.substring(0, line.length - 1);\n    }\n    if (!line) {\n      // empty line and we didn't previously encounter any messages\n      if (!this.event && !this.data.length) return null;\n      const sse = {\n        event: this.event,\n        data: this.data.join('\\n'),\n        raw: this.chunks\n      };\n      this.event = null;\n      this.data = [];\n      this.chunks = [];\n      return sse;\n    }\n    this.chunks.push(line);\n    if (line.startsWith(':')) {\n      return null;\n    }\n    let [fieldname, _, value] = partition(line, ':');\n    if (value.startsWith(' ')) {\n      value = value.substring(1);\n    }\n    if (fieldname === 'event') {\n      this.event = value;\n    } else if (fieldname === 'data') {\n      this.data.push(value);\n    }\n    return null;\n  }\n}\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nclass LineDecoder {\n  constructor() {\n    this.buffer = [];\n    this.trailingCR = false;\n  }\n  decode(chunk) {\n    let text = this.decodeText(chunk);\n    if (this.trailingCR) {\n      text = '\\r' + text;\n      this.trailingCR = false;\n    }\n    if (text.endsWith('\\r')) {\n      this.trailingCR = true;\n      text = text.slice(0, -1);\n    }\n    if (!text) {\n      return [];\n    }\n    const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\n    let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n    if (lines.length === 1 && !trailingNewline) {\n      this.buffer.push(lines[0]);\n      return [];\n    }\n    if (this.buffer.length > 0) {\n      lines = [this.buffer.join('') + lines[0], ...lines.slice(1)];\n      this.buffer = [];\n    }\n    if (!trailingNewline) {\n      this.buffer = [lines.pop() || ''];\n    }\n    return lines;\n  }\n  decodeText(bytes) {\n    if (bytes == null) return '';\n    if (typeof bytes === 'string') return bytes;\n    // Node:\n    if (typeof Buffer !== 'undefined') {\n      if (bytes instanceof Buffer) {\n        return bytes.toString();\n      }\n      if (bytes instanceof Uint8Array) {\n        return Buffer.from(bytes).toString();\n      }\n      throw new error_1.OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`);\n    }\n    // Browser\n    if (typeof TextDecoder !== 'undefined') {\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n        this.textDecoder ?? (this.textDecoder = new TextDecoder('utf8'));\n        return this.textDecoder.decode(bytes);\n      }\n      throw new error_1.OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);\n    }\n    throw new error_1.OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);\n  }\n  flush() {\n    if (!this.buffer.length && !this.trailingCR) {\n      return [];\n    }\n    const lines = [this.buffer.join('')];\n    this.buffer = [];\n    this.trailingCR = false;\n    return lines;\n  }\n}\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set(['\\n', '\\r', '\\x0b', '\\x0c', '\\x1c', '\\x1d', '\\x1e', '\\x85', '\\u2028', '\\u2029']);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\nfunction partition(str, delimiter) {\n  const index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n  return [str, '', ''];\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nfunction readableStreamAsyncIterable(stream) {\n  if (stream[Symbol.asyncIterator]) return stream;\n  const reader = stream.getReader();\n  return {\n    async next() {\n      try {\n        const result = await reader.read();\n        if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n        return result;\n      } catch (e) {\n        reader.releaseLock(); // release lock when stream becomes errored\n        throw e;\n      }\n    },\n    async return() {\n      const cancelPromise = reader.cancel();\n      reader.releaseLock();\n      await cancelPromise;\n      return {\n        done: true,\n        value: undefined\n      };\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n  };\n}","map":{"version":3,"names":["index_1","require","error_1","error_2","Stream","constructor","iterator","controller","fromSSEResponse","response","consumed","decoder","SSEDecoder","iterMessages","body","abort","OpenAIError","lineDecoder","LineDecoder","iter","readableStreamAsyncIterable","chunk","line","decode","sse","flush","Error","done","data","startsWith","event","JSON","parse","e","console","error","raw","APIError","undefined","name","fromReadableStream","readableStream","iterLines","Symbol","asyncIterator","tee","left","right","teeIterator","queue","next","length","result","push","shift","toReadableStream","self","encoder","TextEncoder","ReadableStream","start","pull","ctrl","value","close","bytes","encode","stringify","enqueue","err","cancel","return","exports","chunks","endsWith","substring","join","fieldname","_","partition","buffer","trailingCR","text","decodeText","slice","trailingNewline","NEWLINE_CHARS","has","lines","split","NEWLINE_REGEXP","pop","Buffer","toString","Uint8Array","from","TextDecoder","ArrayBuffer","textDecoder","Set","str","delimiter","index","indexOf","stream","reader","getReader","read","releaseLock","cancelPromise"],"sources":["/Users/wh1skyne/WebstormProjects/ChatAI/Backend/node_modules/openai/src/streaming.ts"],"sourcesContent":["import { ReadableStream, type Response } from './_shims/index';\nimport { OpenAIError } from './error';\n\nimport { APIError } from \"./error\";\n\ntype Bytes = string | ArrayBuffer | Uint8Array | Buffer | null | undefined;\n\ntype ServerSentEvent = {\n  event: string | null;\n  data: string;\n  raw: string[];\n};\n\nexport class Stream<Item> implements AsyncIterable<Item> {\n  controller: AbortController;\n\n  constructor(private iterator: () => AsyncIterator<Item>, controller: AbortController) {\n    this.controller = controller;\n  }\n\n  static fromSSEResponse<Item>(response: Response, controller: AbortController) {\n    let consumed = false;\n    const decoder = new SSEDecoder();\n\n    async function* iterMessages(): AsyncGenerator<ServerSentEvent, void, unknown> {\n      if (!response.body) {\n        controller.abort();\n        throw new OpenAIError(`Attempted to iterate over a response with no body`);\n      }\n\n      const lineDecoder = new LineDecoder();\n\n      const iter = readableStreamAsyncIterable<Bytes>(response.body);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          const sse = decoder.decode(line);\n          if (sse) yield sse;\n        }\n      }\n\n      for (const line of lineDecoder.flush()) {\n        const sse = decoder.decode(line);\n        if (sse) yield sse;\n      }\n    }\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const sse of iterMessages()) {\n          if (done) continue;\n\n          if (sse.data.startsWith('[DONE]')) {\n            done = true;\n            continue;\n          }\n\n          if (sse.event === null) {\n            let data;\n\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n\n            if (data && data.error) {\n              throw new APIError(undefined, data.error, undefined, undefined);\n            }\n\n            yield data;\n          }\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  /**\n   * Generates a Stream from a newline-separated ReadableStream\n   * where each item is a JSON value.\n   */\n  static fromReadableStream<Item>(readableStream: ReadableStream, controller: AbortController) {\n    let consumed = false;\n\n    async function* iterLines(): AsyncGenerator<string, void, unknown> {\n      const lineDecoder = new LineDecoder();\n\n      const iter = readableStreamAsyncIterable<Bytes>(readableStream);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          yield line;\n        }\n      }\n\n      for (const line of lineDecoder.flush()) {\n        yield line;\n      }\n    }\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const line of iterLines()) {\n          if (done) continue;\n          if (line) yield JSON.parse(line);\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<Item> {\n    return this.iterator();\n  }\n\n  /**\n   * Splits the stream into two streams which can be\n   * independently read from at different speeds.\n   */\n  tee(): [Stream<Item>, Stream<Item>] {\n    const left: Array<Promise<IteratorResult<Item>>> = [];\n    const right: Array<Promise<IteratorResult<Item>>> = [];\n    const iterator = this.iterator();\n\n    const teeIterator = (queue: Array<Promise<IteratorResult<Item>>>): AsyncIterator<Item> => {\n      return {\n        next: () => {\n          if (queue.length === 0) {\n            const result = iterator.next();\n            left.push(result);\n            right.push(result);\n          }\n          return queue.shift()!;\n        },\n      };\n    };\n\n    return [\n      new Stream(() => teeIterator(left), this.controller),\n      new Stream(() => teeIterator(right), this.controller),\n    ];\n  }\n\n  /**\n   * Converts this stream to a newline-separated ReadableStream of\n   * JSON stringified values in the stream\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n   */\n  toReadableStream(): ReadableStream {\n    const self = this;\n    let iter: AsyncIterator<Item>;\n    const encoder = new TextEncoder();\n\n    return new ReadableStream({\n      async start() {\n        iter = self[Symbol.asyncIterator]();\n      },\n      async pull(ctrl) {\n        try {\n          const { value, done } = await iter.next();\n          if (done) return ctrl.close();\n\n          const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n\n          ctrl.enqueue(bytes);\n        } catch (err) {\n          ctrl.error(err);\n        }\n      },\n      async cancel() {\n        await iter.return?.();\n      },\n    });\n  }\n}\n\nclass SSEDecoder {\n  private data: string[];\n  private event: string | null;\n  private chunks: string[];\n\n  constructor() {\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n\n  decode(line: string) {\n    if (line.endsWith('\\r')) {\n      line = line.substring(0, line.length - 1);\n    }\n\n    if (!line) {\n      // empty line and we didn't previously encounter any messages\n      if (!this.event && !this.data.length) return null;\n\n      const sse: ServerSentEvent = {\n        event: this.event,\n        data: this.data.join('\\n'),\n        raw: this.chunks,\n      };\n\n      this.event = null;\n      this.data = [];\n      this.chunks = [];\n\n      return sse;\n    }\n\n    this.chunks.push(line);\n\n    if (line.startsWith(':')) {\n      return null;\n    }\n\n    let [fieldname, _, value] = partition(line, ':');\n\n    if (value.startsWith(' ')) {\n      value = value.substring(1);\n    }\n\n    if (fieldname === 'event') {\n      this.event = value;\n    } else if (fieldname === 'data') {\n      this.data.push(value);\n    }\n\n    return null;\n  }\n}\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nclass LineDecoder {\n  // prettier-ignore\n  static NEWLINE_CHARS = new Set(['\\n', '\\r', '\\x0b', '\\x0c', '\\x1c', '\\x1d', '\\x1e', '\\x85', '\\u2028', '\\u2029']);\n  static NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\n\n  buffer: string[];\n  trailingCR: boolean;\n  textDecoder: any; // TextDecoder found in browsers; not typed to avoid pulling in either \"dom\" or \"node\" types.\n\n  constructor() {\n    this.buffer = [];\n    this.trailingCR = false;\n  }\n\n  decode(chunk: Bytes): string[] {\n    let text = this.decodeText(chunk);\n\n    if (this.trailingCR) {\n      text = '\\r' + text;\n      this.trailingCR = false;\n    }\n    if (text.endsWith('\\r')) {\n      this.trailingCR = true;\n      text = text.slice(0, -1);\n    }\n\n    if (!text) {\n      return [];\n    }\n\n    const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\n    let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n\n    if (lines.length === 1 && !trailingNewline) {\n      this.buffer.push(lines[0]!);\n      return [];\n    }\n\n    if (this.buffer.length > 0) {\n      lines = [this.buffer.join('') + lines[0], ...lines.slice(1)];\n      this.buffer = [];\n    }\n\n    if (!trailingNewline) {\n      this.buffer = [lines.pop() || ''];\n    }\n\n    return lines;\n  }\n\n  decodeText(bytes: Bytes): string {\n    if (bytes == null) return '';\n    if (typeof bytes === 'string') return bytes;\n\n    // Node:\n    if (typeof Buffer !== 'undefined') {\n      if (bytes instanceof Buffer) {\n        return bytes.toString();\n      }\n      if (bytes instanceof Uint8Array) {\n        return Buffer.from(bytes).toString();\n      }\n\n      throw new OpenAIError(\n        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`,\n      );\n    }\n\n    // Browser\n    if (typeof TextDecoder !== 'undefined') {\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n        this.textDecoder ??= new TextDecoder('utf8');\n        return this.textDecoder.decode(bytes);\n      }\n\n      throw new OpenAIError(\n        `Unexpected: received non-Uint8Array/ArrayBuffer (${\n          (bytes as any).constructor.name\n        }) in a web platform. Please report this error.`,\n      );\n    }\n\n    throw new OpenAIError(\n      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`,\n    );\n  }\n\n  flush(): string[] {\n    if (!this.buffer.length && !this.trailingCR) {\n      return [];\n    }\n\n    const lines = [this.buffer.join('')];\n    this.buffer = [];\n    this.trailingCR = false;\n    return lines;\n  }\n}\n\nfunction partition(str: string, delimiter: string): [string, string, string] {\n  const index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n\n  return [str, '', ''];\n}\n\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nfunction readableStreamAsyncIterable<T>(stream: any): AsyncIterableIterator<T> {\n  if (stream[Symbol.asyncIterator]) return stream;\n\n  const reader = stream.getReader();\n  return {\n    async next() {\n      try {\n        const result = await reader.read();\n        if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n        return result;\n      } catch (e) {\n        reader.releaseLock(); // release lock when stream becomes errored\n        throw e;\n      }\n    },\n    async return() {\n      const cancelPromise = reader.cancel();\n      reader.releaseLock();\n      await cancelPromise;\n      return { done: true, value: undefined };\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}